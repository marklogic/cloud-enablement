{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "9.0-3",
    "parameters": {
        "ClusterName": {
            "type": "string",
            "minLength": 0,
            "metadata": {
                "description": "The name of the cluster"
            }
        },
        "AdminUser": {
            "type": "string",
            "minLength": 0,
            "metadata": {
                "description": "The MarkLogic Administrator Username"
            }
        },
        "AdminPassword": {
            "type": "secureString",
            "minLength": 0,
            "metadata": {
                "description": "The MarkLogic Administrator Username"
            }
        },
        "Licensee": {
            "type": "string",
            "minLength": 0,
            "defaultValue": "none",
            "metadata": {
                "description": "The MarkLogic Licensee or 'none'"
            }
        },
        "LicenseKey": {
            "type": "string",
            "minLength": 0,
            "defaultValue": "none",
            "metadata": {
                "description": "The MarkLogic License Key or 'none'"
            }
        },
        "NumberOfNodes": {
            "type": "int",
            "defaultValue": 3,
            "allowedValues": [1,3],
            "metadata": {
                "description": "Number of nodes in the cluster"
            }
        },
        "EnableAvailabilitySet": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Whether to put virtual machines in an Availability Set"
            }
        },
        "LoadBalancer": {
            "type": "string",
            "defaultValue": "public",
            "allowedValues": ["public", "internal"],
            "metadata": {
                "description": "Type of load balancer to use, public or internal"
            }
        },
        "IPV6": {
            "type": "bool",
            "defaultValue": "true",
            "metadata": {
                "description": "Whether to enable IPv6 on the cluster"
            }
        },
        "OSStorage": {
            "type": "string",
            "defaultValue": "premium",
            "allowedValues": ["premium", "standard"],
            "metadata": {
                "description": "Storage type for operating system of virtual machines, premium or standard"
            }
        },
        "DataStorage": {
            "type": "string",
            "defaultValue": "premium",
            "allowedValues": ["premium", "standard"],
            "metadata": {
                "description": "Storage type for data directory of virtual machines, premium or standard"
            }
        },
        "VirtualMachineUser": {
            "type": "string",
            "minLength": 0,
            "metadata": {
                "description": "Username used to log into virtual machines"
            }
        },
        "SSHPublicKey": {
            "type": "string",
            "minLength": 0,
            "metadata": {
                "description": "The public key for SSH"
            }
        },
        "InstanceType": {
            "type": "string",
            "defaultValue": "Standard_DS1_v2",
            "allowedValues": 
            [
                "Standard_DS1_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_DS2_v2_Promo",
                "Standard_DS3_v2_Promo",
                "Standard_DS4_v2_Promo",
                "Standard_DS5_v2_Promo",
                "Standard_DS11_v2_Promo",
                "Standard_DS12_v2_Promo",
                "Standard_DS13_v2_Promo",
                "Standard_DS14_v2_Promo",
                "Standard_F1s",
                "Standard_F2s",
                "Standard_F4s",
                "Standard_F8s",
                "Standard_F16s",
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A5",
                "Standard_A4",
                "Standard_A6",
                "Standard_A7",
                "Basic_A0",
                "Basic_A1",
                "Basic_A2",
                "Basic_A3",
                "Basic_A4",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_D15_v2",
                "Standard_D2_v2_Promo",
                "Standard_D3_v2_Promo",
                "Standard_D4_v2_Promo",
                "Standard_D5_v2_Promo",
                "Standard_D11_v2_Promo",
                "Standard_D12_v2_Promo",
                "Standard_D13_v2_Promo",
                "Standard_D14_v2_Promo",
                "Standard_F1",
                "Standard_F2",
                "Standard_F4",
                "Standard_F8",
                "Standard_F16",
                "Standard_A1_v2",
                "Standard_A2m_v2",
                "Standard_A2_v2",
                "Standard_A4m_v2",
                "Standard_A4_v2",
                "Standard_A8m_v2",
                "Standard_A8_v2",
                "Standard_H8",
                "Standard_H16",
                "Standard_H8m",
                "Standard_H16m",
                "Standard_H16r",
                "Standard_H16mr",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_NV6",
                "Standard_NV12",
                "Standard_NV24",
                "Standard_DS1",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_NC6",
                "Standard_NC12",
                "Standard_NC24",
                "Standard_NC24r",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D16_v3",
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_E2_v3",
                "Standard_E4_v3",
                "Standard_E8_v3",
                "Standard_E16_v3",
                "Standard_E32_v3",
                "Standard_E64_v3",
                "Standard_E2s_v3",
                "Standard_E4s_v3",
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_E32s_v3",
                "Standard_E64s_v3"
            ],
            "metadata": {
                "description": "Type of virtual machine to launch"
            }
        },
        "HighAvailability": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Whether to configure high availability on MarkLogic cluster"
            }
        }
    },
    "variables": {
        "templateVersion": "9.0-3",
        "repositoryUrl": "https://s3-us-west-2.amazonaws.com/mattsun-s3-bucket/cloud-enablement/azure/",
        "templateBaseUrl": "[concat(variables('repositoryUrl'),'templates/')]",
        "scriptBaseUrl": "[concat(variables('repositoryUrl'),'scripts/')]",
        "clusterPrefix": "[replace(parameters('ClusterName'),' ','')]",
        "clusterLocation": "[resourceGroup().location]",
        "internalLoadBalancerPrivateIP": "10.0.1.10",
        "EnableAvailabilitySet": "[if(lessOrEquals(parameters('NumberOfNodes'),1),bool('false'),parameters('EnableAvailabilitySet'))]",
        "license": "[if(and(equals(parameters('Licensee'),'none'),equals(parameters('LicenseKey'),'none')),'DEV','BYOL')]",
        "imageOffer": "[if(equals(variables('license'),'DEV'),'marklogic-developer-9','marklogic-9-byol')]",
        "imageSku": "[if(equals(variables('license'),'DEV'),'ml902_centos','ml902_centos_byol')]",
        "apiVersions": {
            "resourcesApiVersion": "2016-09-01",
            "networkApiVersion": "2017-08-01",
            "storageApiVersion": "2017-03-30",
            "computeApiVersion": "2017-03-30"
        },
        "templateUrls": {
            "availabilitySetTemplateUrl": "[concat(variables('templateBaseUrl'),'availabilitySet.json')]",
            "vnetTemplateUrl": "[concat(variables('templateBaseUrl'),'virtualNetwork.json')]",
            "nodePublicIpTemplateUrl": "[concat(variables('templateBaseUrl'),'nodePublicIp.json')]",
            "nsgTemplateUrl": "[concat(variables('templateBaseUrl'),'networkSecurityGroup.json')]",
            "networkInterfaceTemplateUrl": "[concat(variables('templateBaseUrl'),'networkInterface.json')]",
            "vmTemplateUrl": "[concat(variables('templateBaseUrl'),'virtualMachine.json')]",
            "bootstrapNodeExtTemplateUrl": "[concat(variables('templateBaseUrl'),'bootstrapNodeExt.json')]",
            "additionalNodeExtTemplateUrl": "[concat(variables('templateBaseUrl'),'additionalNodeExt.json')]"
        },
        "scriptUrls": {
            "bootstrapNodeScriptUrl": "[concat(variables('scriptBaseUrl'),'init-bootstrap-node.sh')]",
            "additionalNodeScriptUrl": "[concat(variables('scriptBaseUrl'),'init-additional-node.sh')]"
        },
        "availabilitySetSetting": {
            "name": "[concat(variables('clusterPrefix'),'-availset')]",
            "location": "[variables('clusterLocation')]",
            "updateDomainCount": "20",
            "faultDomainCount": "3",
            "apiVersion": "[variables('apiVersions').computeApiVersion]"
        },
        "vnetSetting": {
            "name": "[concat(variables('clusterPrefix'),'-vnet')]",
            "location": "[variables('clusterLocation')]",
            "vnetPrefix": "10.0.0.0/16",
            "vnetSubnetName": "[concat(variables('clusterPrefix'),'-vnet-subnet')]",
            "vnetSubnetPrefix": "10.0.1.0/24",
            "apiVersion": "[variables('apiVersions').networkApiVersion]"
        },
        "nsgSetting": {
            "name": "[concat(variables('clusterPrefix'),'-nsg')]",
            "location": "[variables('clusterLocation')]",
            "apiVersion": "[variables('apiVersions').networkApiVersion]"
        },
        "nodePublicIpSetting": {
            "name": "[concat(variables('clusterPrefix'),'-ip')]",
            "location": "[variables('clusterLocation')]",
            "domainNameLabel": "[concat(variables('clusterPrefix'),'-',uniqueString(concat(variables('clusterPrefix'),resourceGroup().id)),'-')]",
            "IPv4AllocationMethod": "Static",
            "IPv6AllocationMethod": "Dynamic",
            "idleTimeout": "4",
            "count": "[parameters('NumberOfNodes')]",
            "apiVersion": "[variables('apiVersions').networkApiVersion]"
        },
        "networkInterfaceSetting": {
            "name": "[concat(variables('clusterPrefix'),'-networkInterface')]",
            "apiVersion": "[variables('apiVersions').networkApiVersion]",
            "location": "[variables('clusterLocation')]",
            "count":  "[parameters('NumberOfNodes')]",
            "vnetName": "[variables('vnetSetting').name]",
            "subnetName": "[variables('vnetSetting').vnetSubnetName]",
            "nodePublicIpName": "[variables('nodePublicIpSetting').name]",
            "nsgName": "[variables('nsgSetting').name]"
        },
        "publicLBIpSetting": {},
        "publicLBSetting": {},
        "vmSetting": {
            "location": "[variables('clusterLocation')]",
            "count": "[parameters('NumberOfNodes')]",

            "diagnoStorageAcctName": "[concat(toLower(variables('clusterPrefix')),'diagnostorageacct')]",
            "storageApiVersion": "[variables('apiVersions').storageApiVersion]",
            "diagnoStorageAccType": "Standard_RAGRS",

            "dataDiskName": "[concat(variables('clusterPrefix'),'-disk')]",
            "dataDiskCreateOption": "Empty",
            "dataDiskAcctType": "[if(equals(parameters('DataStorage'),'standard'),'Standard_LRS','Premium_LRS')]",
            "dataDiskSizeGB": 1023,

            "computeApiVersion": "[variables('apiVersions').computeApiVersion]",
            "vmName": "[concat(variables('clusterPrefix'),'-vm')]",
            "imagePublisher": "marklogic",
            "imageOffer": "[variables('imageOffer')]",
            "imageSku": "[variables('imageSku')]",
            "imageVersion": "latest",
            "availabilitySetName": "[variables('availabilitySetSetting').name]",
            "enableAvailabilitySet": "[variables('EnableAvailabilitySet')]",
            "vmSize": "[parameters('InstanceType')]",
            "adminUsername": "[parameters('VirtualMachineUser')]",
            "sshKey": "[parameters('SSHPublicKey')]",
            "osDiskAcctType": "[if(equals(parameters('OSStorage'),'standard'),'Standard_LRS','Premium_LRS')]",
            "networkInterfaceName": "[variables('networkInterfaceSetting').name]"
        },
        "bootstrapNodeExtSetting": {
            "vmName": "[variables('vmSetting').vmName]",
            "apiVersion": "[variables('apiVersions').computeApiVersion]",
            "location": "[variables('clusterLocation')]",
            "bootstrapNodeScriptUrl": "[variables('scriptUrls').bootstrapNodeScriptUrl]",
            "cmdPrefix": "[concat('sh init-bootstrap-node.sh ',parameters('AdminUser'),' ',parameters('AdminPassword'),' anyauth public 5 10')]",
            "dnsPrefix": "[variables('nodePublicIpSetting').domainNameLabel]",
            "vmLocation": "[variables('vmSetting').location]"
        },
        "additionalNodeExtSetting": {
            "vmName": "[variables('vmSetting').vmName]",
            "apiVersion": "[variables('apiVersions').computeApiVersion]",
            "location": "[variables('clusterLocation')]",
            "additionalNodeExtCount": "[sub(parameters('NumberOfNodes'),1)]",
            "additionalNodeScriptUrl": "[variables('scriptUrls').additionalNodeScriptUrl]",
            "vmLocation": "[variables('vmSetting').location]",
            "dnsPrefix": "[variables('nodePublicIpSetting').domainNameLabel]",
            "cmdPrefix": "[concat('sh init-additional-node.sh ',parameters('AdminUser'),' ',parameters('AdminPassword'),' anyauth 5 10')]"
        }
    },
    "resources": [
        {
            "name": "availabilitySetDeployment",
            "condition": "[variables('EnableAvailabilitySet')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').availabilitySetTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "availabilitySetSetting": {
                        "value": "[variables('availabilitySetSetting')]"
                    }
                }
            }
        },
        {
            "name": "vnetDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').vnetTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "vnetSetting": {
                        "value": "[variables('vnetSetting')]"
                    }
                }
            }
        },
        {
            "name": "nodePublicIpDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').nodePublicIpTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "nodePublicIpSetting": {
                        "value": "[variables('nodePublicIpSetting')]"
                    }
                }
            }
        },
        {
            "name": "nsgDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').nsgTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "nsgSetting": {
                        "value": "[variables('nsgSetting')]"
                    }
                }
            }
        },
        {
            "name": "networkInterfaceDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "dependsOn": [
                "vnetDeployment",
                "nodePublicIpDeployment",
                "nsgDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').networkInterfaceTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "networkInterfaceSetting": {
                        "value": "[variables('networkInterfaceSetting')]"
                    }
                }
            }
        },
        {
            "name": "virtualMachineDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "dependsOn": [
                "networkInterfaceDeployment",
                "availabilitySetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').vmTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "vmSetting": {
                        "value": "[variables('vmSetting')]"
                    }
                }
            }
        },
        {
            "name": "bootstrapNodeExtDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "dependsOn": [
                "virtualMachineDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').bootstrapNodeExtTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "bootstrapNodeExtSetting": {
                        "value": "[variables('bootstrapNodeExtSetting')]"
                    }
                }
            }
        },
        {
            "name": "additionalNodeExtDeployment",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').resourcesAPIVersion]",
            "dependsOn": [
                "bootstrapNodeExtDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').additionalNodeExtTemplateUrl]",
                    "contentVersion": "[variables('templateVersion')]"
                },
                "parameters": {
                    "extSetting": {
                        "value": "[variables('additionalNodeExtSetting')]"
                    }
                }
            }
        }
    ]
}